#!/bin/bash

# Debian
# ls -l /bin/sh
# lrwxrwxrwx 1 root root 4 Mar 14 07:11 /bin/sh -> dash
# dash do not support echo -e "output" 

apt update
apt -y upgrade 

Green='\033[0;32m' 
Yellow='\033[0;33m'
RED='\033[0;31m'
NOCOLOR='\033[0m'

###########################################################################################################################
#apt正确自动提示删除旧内核的逻辑仅适用于(普遍情况)
#linux-image-5.16.0-6-amd64
#linux-image-5.15.0-6-amd64
#linux-image-5.12.0-6-amd64
#linux-image-amd64 
#这种形式(或者arm64)

#不支持多种内核混杂(没法用sort简单排序了)，比如
#linux-image-5.16.0-6-amd64
#linux-image-5.16.0-6-rt-amd64
#linux-image-5.16.0-6-cloud-amd64
###########################################################################################################################
cat > /etc/kernel/postinst.d/zz-update-systemd-boot <<'EOF'
#!/bin/bash

/usr/bin/kernel-install add "$1" "$2"

if [ $? -eq 0 ]
then
  echo -e "\033[0;32mSystemd-boot Add Entry Success: $1\033[0m"
else
  echo -e "\033[0;31mSystemd-boot Add Entry Failed: $1\033[0m"
  exit 1
fi

NUMBER_OF_KERNEL=$(dpkg -l|awk '{print $2}'|grep linux-image|sed '/linux-image-amd64/d'|sed '/linux-image-arm64/d'|sort -r|wc -l)

echo -e "\033[0;32mNumber of Kernel: ${NUMBER_OF_KERNEL}\033[0m"

for i in $(dpkg -l|awk '{print $2}'|grep linux-image|sed '/linux-image-amd64/d'|sed '/linux-image-arm64/d'|sort -r)
do
    echo -e "\033[0;32mInstalled Kernel: $i\033[0m"
done

if [ ${NUMBER_OF_KERNEL} -gt 2 ] 
then
   echo " "
   echo -e "\033[0;33mSuggestion: Only Keep The Latest Two Kernels\033[0m"
   echo -e "\033[0;33mapt -y purge $(dpkg -l|awk '{print $2}'|grep linux-image|sed '/linux-image-amd64/d'|sed '/linux-image-arm64/d'|sort -r|sed '1,2d'|tr '\n' ' ')\033[0m"
fi
EOF
##########################################################################################################################
chmod 755 /etc/kernel/postinst.d/zz-update-systemd-boot
##########################################################################################################################
cat > /etc/kernel/postrm.d/zz-update-systemd-boot <<'EOF'
#!/bin/bash

/usr/bin/kernel-install remove "$1"

if [ $? -eq 0 ]
then
  echo -e "\033[0;32mSystemd-boot Remove Entry Success: $1\033[0m"
  exit 0
else
  echo -e "\033[0;31mSystemd-boot Remove Entry Failed: $1\033[0m"
  exit 1
fi
EOF
##########################################################################################################################
chmod 755 /etc/kernel/postrm.d/zz-update-systemd-boot
##########################################################################################################################
MACHINE_ID=$(cat /etc/machine-id)
ESP_PATH=$(bootctl -p)

bootctl install 
mkdir ${ESP_PATH}/${MACHINE_ID}

##########################################################################################################################
cat > ${ESP_PATH}/loader/loader.conf<<EOF
timeout 2
EOF
##########################################################################################################################

# get latest installed kernel package name 
KERNEL_PACKAGE=$(dpkg -l|awk '{print $2}'|grep linux-image|sed '/linux-image-amd64/d'|sed '/linux-image-arm64/d'|sort -r|head -1)

# manually trigger postinst.d script to run kernel-install
# kernel-install move /boot/vmlinuz /boot/initrd to ESP:/MACHINEID.
# and add entry in ESP:/loader/entries
apt -y reinstall ${KERNEL_PACKAGE}

apt -y purge grub*
apt -y install efibootmgr
apt -y autoremove
efibootmgr
##########################################################################################################################
echo -e "\033[0;33mPlease Manually Configure Boot Order\033[0m"
echo -e "\033[0;33mefibootmgr -b <X> -B\033[0m"
