#!/bin/sh

apt update
apt -y upgrade 

Green='\033[0;32m' 
Yellow='\033[0;33m'
RED='\033[0;31m'
NOCOLOR='\033[0m'

###########################################################################################################################
apt自动删除旧内核的逻辑仅适用于(普遍情况)
linux-image-5.16.0-6-amd64
linux-image-5.15.0-6-amd64
linux-image-5.12.0-6-amd64
linux-image-amd64 
这种形式(或者arm64)

不支持多种内核混杂(sort 没法排序了)，比如
linux-image-5.16.0-6-amd64
linux-image-5.16.0-6-rt-amd64
linux-image-5.16.0-6-cloud-amd64
###########################################################################################################################
cat > /etc/kernel/postinst.d/zz-update-systemd-boot <<'EOF'
#!/bin/sh

/usr/bin/kernel-install add "$1" "$2"

if [ $? -eq 0 ]
then
  echo "\033[0;32mSystemd-boot Add Entry Success\033[0m"
  exit 0
else
  echo "\033[0;31mSystemd-boot Add Entry Failed\033[0m"
  exit 1
fi

# We only need 2 kernel: the latest one and the previous one
NUMBER_OF_EXTRA_KERNEL=$(dpkg -l|awk '{print $2}'|grep linux-image|sed '/linux-image-amd64/d'|sed '/linux-image-arm64/d'|sort -r|sed '1,2d'|wc -l)

if [ ${NUMBER_OF_EXTRA_KERNEL} -gt 0 ] 
then
    echo "\033[0;33mMore than two kernel found\033[0m"
    
    for i in $(dpkg -l|awk '{print $2}'|grep linux-image|sed '/linux-image-amd64/d'|sed '/linux-image-arm64/d'|sort -r|sed '1,2d')
    do
        /usr/bin/apt purge -y ${i}
        if [ $? -eq 0 ]
        then
            echo "\033[0;32mApt Purge Kernel ${i} Success\033[0m"
        else
            echo "\033[0;31mApt Purge Kernel ${i} Failed\033[0m"
        fi
    done
fi

EOF
##########################################################################################################################
chmod 755 /etc/kernel/postinst.d/zz-update-systemd-boot
##########################################################################################################################
cat > /etc/kernel/postrm.d/zz-update-systemd-boot <<'EOF'
#!/bin/sh

/usr/bin/kernel-install remove "$1"

if [ $? -eq 0 ]
then
  echo "\033[0;32mSystemd-boot Remove Entry Success\033[0m"
  exit 0
else
  echo "\033[0;31mSystemd-boot Remove Entry Failed\033[0m"
  exit 1
fi
EOF
##########################################################################################################################
chmod 755 /etc/kernel/postrm.d/zz-update-systemd-boot
##########################################################################################################################
MACHINE_ID=$(cat /etc/machine-id)
ESP_PATH=$(bootctl -p)

bootctl install 
mkdir ${ESP_PATH}/${MACHINE_ID}

##########################################################################################################################
cat > ${ESP_PATH}/loader/loader.conf<<EOF
timeout 2
EOF
##########################################################################################################################

# get latest installed kernel package name 
KERNEL_PACKAGE=$(dpkg -l|awk '{print $2}'|grep linux-image|sed '/linux-image-amd64/d'|sed '/linux-image-arm64/d'|sort -r|head -1)

# manually trigger postinst.d script to run kernel-install
# kernel-install move /boot/vmlinuz /boot/initrd to ESP:/MACHINEID.
# and add entry in ESP:/loader/entries
apt -y reinstall ${KERNEL_PACKAGE}

apt -y remove grub*
apt install efibootmgr
apt -y autoremove
efibootmgr
##########################################################################################################################
echo "\033[0;33mPlease Manually Configure Boot Order\033[0m"
echo "\033[0;33mefibootmgr -b <X> -B\033[0m"
